#ifndef LOG_FILE_CRYPTOGRAPHY_PROVIDER_HPP
#define LOG_FILE_CRYPTOGRAPHY_PROVIDER_HPP
#include <vector>
#include <algorithm>
#include <numeric>
#include <iostream>
#include "sodium.h"
#include <cstring>
#include "utils/custom_string_utils.hpp"
class LogFileCryptographyProvider
{
private:
    std::string saltAndPepperEncryptionKey(const std::string& key)const{
        std::string saltAndPepper="1221343";
        auto saltedAndPepperedKey=saltAndPepper+key+saltAndPepper;
        auto hashedKey=hashText(saltedAndPepperedKey);
        std::string hmacKey(hashedKey.begin(),hashedKey.end());
        return hmacKey;
    }
    std::string keyToHmacKey(const std::string& key)const{
        std::string saltAndPepper="a72dsf3";
        auto saltedAndPepperedKey=saltAndPepper+key+saltAndPepper;
        return saltedAndPepperedKey;
    }
public:
    static const auto NONCE_BYTES = crypto_stream_chacha20_NONCEBYTES;
    static const auto KEY_BYTES = crypto_stream_chacha20_KEYBYTES;
    static const auto HMAC_BYTES = crypto_auth_hmacsha512_BYTES;
    LogFileCryptographyProvider()
    {
        if (sodium_init() == -1)
        {
            throw std::runtime_error("Failed to load sodium library for encryption and decryption resources.");
        }
    }
    /// @brief Validates an hmac matches the HMAC generated by a given text value, aka that the data is unmodified
    /// @param text
    /// @param hmac
    /// @param key
    /// @return
    bool isNotModified(const std::vector<unsigned char> &text, const std::vector<unsigned char> &hmac, const std::string &key) const;
    std::vector<unsigned char> hashText(const std::string &text) const
    {
        std::vector<unsigned char> buffer;
        buffer.reserve(KEY_BYTES);
        buffer.resize(KEY_BYTES);
        crypto_hash_sha256(buffer.data(), STR_AS_UCHAR_STAR(text), text.size());
        return buffer;
    }
    
    /// @brief Decrypts the contents in place and returns an iterator to the start and end of the file contents.
    /// @param rawFileData The entire data associated with a log file, including cryptography related parts
    /// @return Decrypted file contents, without cryptographic data.
    std::vector<unsigned char> decrypt(const std::vector<unsigned char> &rawFileData, const std::string &key) const;
    /// @brief Generates an hmac for a file.
    /// @param rawFileData File data including nonce and keyhash
    /// @return
    std::vector<unsigned char> generateHMAC(const std::vector<unsigned char> &rawFileData, const std::string &key) const;
    /// @brief Encrypts the provided plaintext.
    /// @param rawFileData Plaintext to encrypt
    /// @param key Encryption key
    /// @return The encrypted data prepended with the nonce then key hash.
    std::vector<unsigned char> encrypt(const std::vector<unsigned char> &rawFileData, const std::string &key) const;
};
#endif